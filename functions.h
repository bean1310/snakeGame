/* ヘッダファイル */
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <ncurses.h>
#include <time.h>
#include <stdbool.h>

#define GAME_NAME "Snake Game"

#define UP      0
#define DOWN    1
#define LEFT    2
#define RIGHT   3

#define MARGIN_X 5
#define MARGIN_Y 5

#define loop(num) for(int qazwsx = 0; qazwsx < num; qazwsx++)



/* ----------------------- 型定義ゾーン ----------------------- */


/* ヘビの体1ブロックを格納する構造体 */
typedef struct blockData{
    int x;
    int y;
    struct blockData *next;
} block_t;



/* ----------------------- 変数ゾーン ----------------------- */


/* ヘビの頭のアドレスを格納する変数 */
extern block_t *snake;

/* 入力されたキーを格納する変数 */
extern int key;

/* 前の段階で入力されたキーを格納する変数 */
extern int oldKey;



/* ----------------------- 関数ゾーン ----------------------- */


/*********************************************************
 initGameScreen() -- ゲーム画面の初期化
 
 説明: シェルの画面に合わせた画面を描画する.
      小さ過ぎればstderrにその旨を出力.
 *********************************************************/
extern void initGameScreen();

/*********************************************************
 initGameConfig() -- ゲーム設定の初期化
 
 説明: 蛇の初期位置とキー入力待ち時間の初期設定を行う.
      その後food()関数で食べ物設置
 *********************************************************/
extern void initGameConfig();

/*********************************************************
 initgameStartScreen() -- ゲーム開始時の画面の出力
 
 説明: mainWindow中央に開始か終了の選択肢を提示.
      また上(w)下(s)キーで'*'を選択肢の"[ ]"内どちらかに表示.
      表示が貧相すぎる問題.
      ちなみにpause関数のコピー.
 
 戻り値: ゲームを終了させるならtrue.プレイするならfalse.
 *********************************************************/
extern bool gameStartScreen();

/*********************************************************
 crawl(int udlr) -- 各キー操作の処理
 
 説明: ゲームの核になる関数.なぜcrawlって名前にしたか忘れた.
 
 パラメータ: udlr -- 押されたキーの数値(snake.hの13から16行目で定義されてるもの)
 
 戻り値: ゲームオーバーになるような動作をするとtrueを返す.
        そうでないならfalse.
 *********************************************************/
extern bool crawl(int udlr);

/*********************************************************
 addBlock(block_t *head, int *len) -- ヘビの体長を増やす
 
 説明: ヘビのbodyの最後尾に'x'を追加する関数
 
 パラメータ: *head -- ヘビの頭のアドレス
           *len -- ヘビの体長を格納している変数のアドレス
 *********************************************************/
extern void addBlock(block_t *head, int *len);

/*********************************************************
 addFoods() -- 食べ物を設置する関数
 
 説明: ゲーム画面内にランダムに食べ物を配置
 *********************************************************/
extern void addFoods();

/*********************************************************
 pauseGame() -- pause画面を出力する関数
 
 説明: pause(一時停止)画面をだす.
      プレイヤはゲームを続行するか終了させるか選択できる.
 
 戻り値: ゲームを続行するならfalseを返す.
        中止するならtrueを返す.
 *********************************************************/
extern bool pauseGame();

/*********************************************************
 gameOverScreen() -- ゲームオーバ画面を出力する関数
 
 説明: ゲームオーバの時にその画面を出力する.
      表示が貧相すぎる問題.
 *********************************************************/
extern void gameOverScreen();

/*********************************************************
 showScore(const int score) -- スコアを表示する関数
 
 説明: スコアを画面下部に表示させる関数
 
 パラメータ: score -- スコアを格納している変数を指定.
 *********************************************************/
extern void showScore(const int score);

/*********************************************************
 updateScore(int *score) -- スコアをインクリメントする関数
 
 説明: スコアをインクリメントする関数. これ関数にする意味はあったのか...?
 
 パラメータ: *score -- スコアを格納する変数のアドレス:
 *********************************************************/
extern void updateScore(int *score);

/*********************************************************
 shiftBlocks(block_t *head) -- ヘビのブロックをその親ブロックの座標にシフトする関数
 
 説明: へびが移動するときあるブロックnはnの親ブロックの座標に移動する.
      そのときにヘビ全体のブロックをシフトする関数.
 
 パラメータ: *head -- ヘビの頭のアドレス
 *********************************************************/
extern void shiftBlocks(block_t *head);

/*********************************************************
 killSnake(block_t *) -- ヘビを殺す関数
 
 説明: ヘビの体に使うメモリを解放する関数. ヘビに対する動的メモリ解放.
 
 パラメータ: ヘビの頭のアドレス.
 *********************************************************/
extern void killSnake(block_t *);

/*********************************************************
 addchXCenter(char *str, int y, int start, int end) -- y座標におけるstartからendの間の中心にstrを表示する関数
 
 説明: とあるy座標のx座標startからendの間における真ん中に文字を出力する関数. centering的な.
 
 パラメータ: *str -- 出力したい文字列
              y -- 出力したいy座標
          start -- 出力をしたいy座標におけるx座標のスタート
            end -- 出力をしたいy座標におけるx座標のエンド
 *********************************************************/
extern void addchXCenter(char *str, int y, int start, int len);

/*********************************************************
 areKeysRev(const int key1, const int key2) -- 逆向きのキーか判別
 
 説明: key1とkey2が逆向きのキーか判断. 上キーと下キーは逆, 左キーと右キーは逆.
      上キーと左キーは逆ではない.
 
 パラメータ: key1, key2 -- ncursesで定義されているUP_KEY, DOWN_KEY, LEFT_KEY, RIGHT_KEY
 
 戻り値: 逆であればtrue.
        そうでないならfalse.
 *********************************************************/
extern bool areKeysRev(const int key1, const int key2);

/*********************************************************
 isBody(block_t *head, int x, int y) -- (x, y)座標にヘビがいるかどうか判別
 
 説明: (x, y)座標にヘビのbodyがあるかどうかの判断をする.
 
 パラメータ: *head -- ヘビの頭のアドレス
               x -- 調べたい座標のx座標
               y -- 調べたい座標のy座標
 
 戻り値:(x, y)座標にヘビがいるならtrueを返す.
       そうでないならfalseを返す.
 *********************************************************/
extern bool isBody(block_t *head, int x, int y);
